function poly_safe_set = fcn(vTargetSpeed, priority_brake, sLead, time, position1, position2, theta1, theta2, MODE)
% Inputs:
% vTargetSpeed - velocity profile of front car
% sLead - position of front car
% time - time input from simulink, used so poly_safe_set is only calculated
% at 5Hz and to determine the current and future indices of vTargetSpeed
% position1 - position array for lead car that allows for interpolation
% with grade profile (theta1) of lead car
% position2 - position array for ego car that allows for interpolation
% with grade profile (theta2) of ego car
% MODE - determines whether or not the calculation takes gradient knowledge
% into account. MODE 1 = yes, MODE 2 = no.
 % If there is a bug or the code is not behaving as expected, check these things
% Make sure we are using the correct indices from vTargetSpeed
% Make sure we are using radians when we are supposed to, and not degrees or grade.
% Check that all signs in the dynamics are correct.
% Make sure the grade of the road is not being extrapolated to the point where it is significantly off
 OPTION = 1; % determines level of V2V communication (see lines 49-56)
N = 10; % Horizon
 % presetting variables b/c of some weird simulink thing
sLead_predict = zeros(1,N+1);
S1_emg = zeros(1,300);
S2_emg = zeros(1,300);
V1_emg = zeros(1,300);
V2_emg = zeros(1,300);
dsafe = zeros(1,300);
%
poly_safe_set = zeros(N+1,3); % Initializing variable. This is output when time is not a multiple of 0.2
delta_t = 0.2; % Time step used to calculate safe-set
mLead = 1361; % Mass of lead vehicle (Ioniq)
 % When we refer to distance between the two vehicles, we mean the difference in distance each car is 
% from the collision point (where the paths of each vehicle intersect). If the lead vehicle is 5m from
% the collision point and the ego vehicle is 15m, then the distance between the two is 10m.
dmin = 4.425 + 0.3; % Desired center to center distance between vehicles after emergency stop. Note
          % that this takes into account the 4.425m length of the vehicle
          % in Prescan (Ioniq is 4.47m). 1.86m is the width of the vehicles in Prescan (Ioniq is 1.82m).
          % If the vehicles are further than length+width to eachother there will be no possibility 
          % of collision.
Vmax = 40;
m = mLead;
Umin = -15e3;
ka = 1.0637; % Drag coefficient
kr = 0.0093; % Rolling resistance coefficient
g = 9.81;
 if time >= 7.4 + 0.05
        vTargetSpeed = priority_brake;
end
 if abs(floor(time*5) - time*5) < 0.001 % MPC is run at 5Hz, so we only need to calculate the safe-set at 5Hz
    i = floor(time*20+1);
    
    % The OPTION will determine how much we know about the lead car's
    % velocity profile.
    if OPTION == 1
        % The exact future velocity is known
        V01 = vTargetSpeed(i:i+10); % preview of v1 for i to i+Np during the prediction horizon
    elseif OPTION == 2
        % Current velocity known, future velocity assumed constant.
        V01 = vTargetSpeed(i)*ones(1,N+1);
    % possibility for other OPTIONs aswell
    end
    
    sLead_predict(1) = sLead;
    for ti = 1:N
        sLead_predict(ti+1) = sLead_predict(ti) + V01(ti) * delta_t; % recall from MPC code that s(k+1) = s(k) + v(k)*delta_t
    end
    S01 = sLead_predict; % preview of s1 for i to i+Np during the prediction horizon
    % emergency
    for j = 1:N+1
        k = 1;
        S1_emg(1) = S01(j);
        V1_emg(1)= V01(j); 
        dt2 = 0.02; % discretization time for computing the safe set
        while V1_emg(k) >=0 % while the car has forward motion
            if abs(MODE - 1) <= 0.001
                a01 = interp1(position1, theta1, S1_emg(k), 'linear', 'extrap'); % road angle (rad)
            else
                a01 = 0;
            end
            V1_emg(k+1)= V1_emg(k)+dt2/mLead*(Umin-kr*mLead*g*cos(a01)-ka*V1_emg(k)^2-mLead*g*sin(a01));
            S1_emg(k+1) = S1_emg(k)+dt2*V1_emg(k); 
            k = k+1;
        end
        % K IS WHEN THE FRONT CAR STOPS
       h = 1;
       S2_emg(h) = S1_emg(k)- dmin; % S2_emg(1) is where the ego car must be when it comes to a complete stop
       V2_emg(h) = 0;
       dsafe(h) = (S1_emg(1)-S2_emg(h)); % safe distance
       % backward integration of the follower vehicle EOM
       while V2_emg(h) < Vmax 
        if abs(MODE - 1) <= 0.001
            a02 = interp1(position2, theta2, S2_emg(h),'linear', 'extrap' ); % road angle (rad) for ego car
        else
            a02 = 0;
        end
        V2_emg(h+1)= V2_emg(h)-dt2/m*(Umin-kr*m*g*cos(a02)-ka*V2_emg(h)^2-m*g*sin(a02));
        S2_emg(h+1) = S2_emg(h)-dt2* V2_emg(h);
        h = h+1; 
        dsafe(h) = (S1_emg(1)-S2_emg(h));
       end
%        figure(11);hold all
%        plot(dsafe,V2_emg) % this is what we are fitting a polynomial to
       % "hold" is just a way of getting rid of all the trivial entries at
       % the end of V2_emg and dsafe. I did this to work around some
       % simulink issue, so don't worry about it too much.
       hold = max(find(V2_emg));
        poly_safe_set(j,:) = polyfit(V2_emg(1:hold),dsafe(1:hold),2); 
    end
end
