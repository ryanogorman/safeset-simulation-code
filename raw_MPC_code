function [s,vel_MPC,grade_angle_plot,safe_dist_plot,Uout,cost_array] = runMPC_DH(vEgo, Position_ego, refCC, vTargetSpeed, priority_speed_brake, sLead, theta_preview, poly_safe_set, time, MODE)
% The values of "Persistent" variables are retained in between function
% calls. buildController is used to determine whether or not the
% controller_ACC object has been created. When buildController is not
% empty, this function will skip to entering the inputs and finding the
% solution. controller_ACC is the YALMIP optimizer object that takes in
% inputs and solves the MPC problem. Umpc is the force input (kN) to the
% ego vehicle, it is stored as persistent so that it can be used at 20Hz
% (the timestep of the simulink/prescan simulation) instead of just 5Hz
% (the frequency of MPC calculations when a new Umpc is determined).
persistent buildController
persistent controller_ACC
persistent Umpc

%MODE = 1; % CHANGE THIS BACK AFTER
OPTION = 1; % defines level of V2V communication/accuracy (see lines 103 & 105)
m = 1361; % mass of Ioniq (kg)
delta_t = 0.2; % MPC timestep
dt3 = 0.05; % simulink/prescan timestep
Umax = 5e3; % max positive (thrust) force (N)
Umin = -15e3; % max braking force (N)
Vmax = 25; % max allowed velocity
Vmin = 0; % min allowed velocity
ka = 1.0637; % aerodynamic drag coefficient: 0.5*Cd*Rho*Af 
kr = 0.0093; % rolling resistance coeficient
g = 9.81; 
N = 10; % MPC Horizon 

if time < 0.0001
    nx = 1; % Number of states
    nu = 1; % Number of inputs
    % Control input u is based on (kN)
    ny = 1; % Number of outputs

    % MPC data
    % Q,R & RR have not been optimized and can be modified to get different
    % behaviors.
    Q = 10; %punishes deviance from reference velocity
    R = 2; %punishes high acceleration
    RR = 2; %punishes high jerk
    P = 10;
    N = 10; %MPC horizon
    num_poly_coeff = 3; % 3 is the number of polynomial coefficients

    u = sdpvar(repmat(nu,1,N),repmat(1,1,N));
    x = sdpvar(repmat(nx,1,N+1),repmat(1,1,N+1));
    r = sdpvar(repmat(ny,1,N+1),repmat(1,1,N+1));
    s = sdpvar(repmat(nx,1,N+1),repmat(1,1,N+1));

    theta_var = sdpvar(repmat(ny,1,N+1),repmat(1,1,N+1));
    sLead_var = sdpvar(repmat(nx,1,N+1),repmat(1,1,N+1));

    vLead_var = sdpvar(repmat(nx,1,N+1),repmat(1,1,N+1));
    poly_safe_set_var = sdpvar(N+1,num_poly_coeff);
    poly_safe_set_var1 = sdpvar(N+1,num_poly_coeff);
    U_i = sdpvar(1);

    %epsi = sdpvar(1);
    constraints = [];
    objective = 0;

    % The following are based on basic discrete non-linearized kinematics
    % -- i.e. s(k+1) = s(k) + x(k)*delta_t
    % & x(k+1) = x(k) + sum(Forces(k))/m*delta_t
    % However, position 's' is defined as the distance to the collision
    % point where the paths of the two vehicles meet. Thus, if either
    % vehicle is 20 meters away from the collision point its position is 
    % s = 20, if it is 20 meters past the collision point its position is
    % s = -20. As a result, the kinematic equations are slightly modified
    % so that s(k+1) = s(k) - x(k)*delta_t <-- Note the change in sign
    for k = 1:N
        if k == 1
            %objective = objective + (x{k}-vLead_var{k})'*Q*(x{k}-vLead_var{k}) + u{k}'*R*u{k} + (u{k}-U_i)'*RR*(u{k}-U_i);
            objective = 0;
        else
            %objective = objective + (x{k}-vLead_var{k})'*Q*(x{k}-vLead_var{k}) + u{k}'*R*u{k} + (u{k}-u{k-1})'*RR*(u{k}-u{k-1});
            objective = 0;
        end

        constraints = [constraints, s{k+1} == s{k} + delta_t*x{k}];
        constraints = [constraints, x{k+1} == x{k}+ delta_t./m*(u{k}*1000 - ka*x{k}^2 - m*g*kr*cos(theta_var{k})-m*g*sin(theta_var{k}))];
        
        constraints = [constraints, Vmin<=x{k+1}<=Vmax]; 
        constraints = [constraints,  u{k}<=Umax/1000, Umin/1000<=u{k}]; 
        %constraints = [constraints, epsi >= 0]; 
        
%         if ((poly_safe_set_var(k+1,1)*(x{k+1})^2+poly_safe_set_var(k+1,2)*(x{k+1})+poly_safe_set_var(k+1,3))) >= 4.425
%             constraints = [constraints, poly_safe_set_var1(k,:) == poly_safe_set_var(k,:)];
%         else
%             constraints = [constraints, poly_safe_set_var1(k,1:2) == 0, poly_safe_set_var1(k,3) == 4.425];
%         end
        
        %constraints = [constraints, ((poly_safe_set_var1(k+1,1)*(x{k+1})^2+poly_safe_set_var1(k+1,2)*(x{k+1})+poly_safe_set_var1(k+1,3))) >= 4.425];
        constraints = [constraints, sLead_var{k+1} == sLead_var{k} + delta_t*vLead_var{k}];
        constraints = [constraints , (sLead_var{k+1} - s{k+1}) >= (poly_safe_set_var1(k+1,1)*(x{k+1})^2+poly_safe_set_var1(k+1,2)*(x{k+1})+poly_safe_set_var1(k+1,3))];
        
        constraints = [constraints, (sLead_var{k+1} - s{k+1}) <= 4.425 + 3.5];
        constraints = [constraints, (sLead_var{k+1} - s{k+1}) >= 4.425 + 0.1]; % Hard collision constraint
    end
    
    %objective = objective + (x{N+1}-vLead_var{N+1})'*P*(x{N+1}-vLead_var{N+1}); % Terminal cost
    objective = 0;
    
    parameters_in = {x{1}, s{1}, [r{:}], [vLead_var{:}], sLead_var{1}, [theta_var{:}], poly_safe_set_var, U_i};

    solutions_out = {[u{:}], [x{:}], [s{:}], [sLead_var{:}]};
    % ipopt is currently being used as the solver
    controller_ACC = optimizer(constraints, objective, sdpsettings('solver','ipopt','verbos',0),parameters_in,solutions_out);
    buildController = 1;
    % from here on out, buildController is non-empty, so we will not enter
    % this if-statement again.
end

% This if statement only runs when time is a multiple of 0.2
% (0.0,0.2,0.4,0.6...)
theta_ego = theta_preview(1);
Uprev = Umpc;
if time < 0.001
    Uprev = 0;
end
i = floor(time*20) + 1;
if abs(floor(time*5) - time*5) < 0.001 % the 0.001 is used as a tolerence
    vRefCC_mpc = ones(1,N+1).*refCC;
    
    if abs(MODE-2) < 0.001
        theta_preview(:) = 0;
    end
    
%     if time >= 7.4
%         vTargetSpeed = priority_speed_brake;
%     end

    if OPTION == 1 % lead car current & future velocity is exactly known
        inputs = {vEgo, Position_ego, vRefCC_mpc, vTargetSpeed(i:4:i+40)', sLead, (theta_preview), poly_safe_set, Uprev};
    elseif OPTION == 2 % lead car current velocity is known, future velocity assumed constant
        inputs = {vEgo, Position_ego, vRefCC_mpc, vTargetSpeed(i)*ones(1,N+1), sLead, (theta_preview), poly_safe_set, Uprev};
    end
    [solutions,diagnostics] = controller_ACC{inputs};
    
    Umpc = solutions{1}(1);
    
    % the following is used solely for debugging
    debug = zeros(3,11);
    for j = 1:11
        debug(:,j) = [solutions{2}(j)^2; solutions{2}(j); 1];
    end
    safe_debug = (diag(poly_safe_set*debug))';
    % end of debugging code
end
% This code is run 20Hz with simulink/prescan, Umpc only changes every 0.2
% seconds (5Hz).
vel_MPC = vEgo + dt3/m* (Umpc*1000-ka*vEgo^2-kr*m*g*cos(theta_ego)-m*g*sin(theta_ego));
s = Position_ego + dt3*vel_MPC; % note the sign

% Cost variables
R_i = 1; 
R_t = 1;
R_j = 1;
input_cost = abs(Umpc); 
tracking_cost = abs(vel_MPC - vTargetSpeed(i + 1));
jerk_cost = abs(Umpc - Uprev);
combined_cost = R_i*input_cost + R_t*tracking_cost + R_j*jerk_cost;
cost_array = [input_cost, tracking_cost, jerk_cost, combined_cost];

%% Plotting variables - used for display and debugging
%Umpc will already be defined
grade_angle_plot = theta_preview(1);
safe_dist_plot = poly_safe_set(1,1)*vEgo^2 + poly_safe_set(1,2)*vEgo + poly_safe_set(1,3);
% if safe_dist_plot < 4.425 && safe_dist_plot ~= 0
%     safe_dist_plot = 4.425;
% end
Uout = Umpc;
end
